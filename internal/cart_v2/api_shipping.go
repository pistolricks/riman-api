/*
 * Cart-Api v2
 *
 * A Microsoft WebApi2 application. For use by Jeunesse and its Partners, this api has a focus on product and order creation
 *
 * API version: v2
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package cart_v2

import (
	"context"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type ShippingApiService service

/*
ShippingApiService Returns a list of shipping options available.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ShippingApiShippingGetOpts - Optional Parameters:
     * @param "CartKey" (optional.Interface of string) -
     * @param "Address1" (optional.String) -
     * @param "Address2" (optional.String) -
     * @param "Address3" (optional.String) -
     * @param "Country" (optional.String) -
     * @param "State" (optional.String) -
     * @param "Zip" (optional.String) -
     * @param "City" (optional.String) -
     * @param "MainPk" (optional.Int32) -
     * @param "IsPOBox" (optional.Bool) -
     * @param "MainOrderPK" (optional.Int32) -
     * @param "IsSDProfile" (optional.Bool) -
     * @param "IsAdmin" (optional.Bool) -
     * @param "IsEvent" (optional.Bool) -

@return interface{}
*/

type ShippingApiShippingGetOpts struct {
	CartKey     optional.Interface
	Address1    optional.String
	Address2    optional.String
	Address3    optional.String
	Country     optional.String
	State       optional.String
	Zip         optional.String
	City        optional.String
	MainPk      optional.Int32
	IsPOBox     optional.Bool
	MainOrderPK optional.Int32
	IsSDProfile optional.Bool
	IsAdmin     optional.Bool
	IsEvent     optional.Bool
}

func (a *ShippingApiService) ShippingGet(ctx context.Context, localVarOptionals *ShippingApiShippingGetOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v2/shipping/shipping/options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CartKey.IsSet() {
		localVarQueryParams.Add("cartKey", parameterToString(localVarOptionals.CartKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address1.IsSet() {
		localVarQueryParams.Add("address1", parameterToString(localVarOptionals.Address1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address2.IsSet() {
		localVarQueryParams.Add("address2", parameterToString(localVarOptionals.Address2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address3.IsSet() {
		localVarQueryParams.Add("address3", parameterToString(localVarOptionals.Address3.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Country.IsSet() {
		localVarQueryParams.Add("country", parameterToString(localVarOptionals.Country.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarQueryParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Zip.IsSet() {
		localVarQueryParams.Add("zip", parameterToString(localVarOptionals.Zip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarQueryParams.Add("city", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MainPk.IsSet() {
		localVarQueryParams.Add("mainPk", parameterToString(localVarOptionals.MainPk.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsPOBox.IsSet() {
		localVarQueryParams.Add("isPOBox", parameterToString(localVarOptionals.IsPOBox.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MainOrderPK.IsSet() {
		localVarQueryParams.Add("mainOrderPK", parameterToString(localVarOptionals.MainOrderPK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsSDProfile.IsSet() {
		localVarQueryParams.Add("isSDProfile", parameterToString(localVarOptionals.IsSDProfile.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsAdmin.IsSet() {
		localVarQueryParams.Add("isAdmin", parameterToString(localVarOptionals.IsAdmin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsEvent.IsSet() {
		localVarQueryParams.Add("isEvent", parameterToString(localVarOptionals.IsEvent.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
