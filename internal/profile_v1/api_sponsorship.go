/*
 * Profile-Api v1.0
 *
 * A Microsoft WebApi2 application. For use by Jeunesse and its Partners, this api has a focus on product and order creation
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package profile_v1

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type SponsorshipApiService service

/*
SponsorshipApiService Get the sponsor siteUrl
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteUrl
 * @param optional nil or *SponsorshipApiSponsorshipGetSponsorSiteUrlOpts - Optional Parameters:
     * @param "ApiVersion" (optional.String) -  The requested API version

@return interface{}
*/

type SponsorshipApiSponsorshipGetSponsorSiteUrlOpts struct {
	ApiVersion optional.String
}

func (a *SponsorshipApiService) SponsorshipGetSponsorSiteUrl(ctx context.Context, siteUrl string, localVarOptionals *SponsorshipApiSponsorshipGetSponsorSiteUrlOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sponsorship/sponsor/{siteUrl}"
	localVarPath = strings.Replace(localVarPath, "{"+"siteUrl"+"}", fmt.Sprintf("%v", siteUrl), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SponsorshipApiService Get the sponsorship report data
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SponsorshipApiSponsorshipGetSponsorshipTotalOpts - Optional Parameters:
     * @param "ApiVersion" (optional.String) -  The requested API version
     * @param "MainSiteUrl" (optional.String) -
     * @param "SiteURL" (optional.String) -
     * @param "FName" (optional.String) -
     * @param "LName" (optional.String) -
     * @param "DisplayName" (optional.String) -
     * @param "IsCountedByPlatinum" (optional.Bool) -
     * @param "Statuses" (optional.String) -
     * @param "HighestRanks" (optional.String) -
     * @param "SearchMainPK" (optional.Int32) -

@return interface{}
*/

type SponsorshipApiSponsorshipGetSponsorshipTotalOpts struct {
	ApiVersion          optional.String
	MainSiteUrl         optional.String
	SiteURL             optional.String
	FName               optional.String
	LName               optional.String
	DisplayName         optional.String
	IsCountedByPlatinum optional.Bool
	Statuses            optional.String
	HighestRanks        optional.String
	SearchMainPK        optional.Int32
}

func (a *SponsorshipApiService) SponsorshipGetSponsorshipTotal(ctx context.Context, localVarOptionals *SponsorshipApiSponsorshipGetSponsorshipTotalOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sponsorship"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MainSiteUrl.IsSet() {
		localVarQueryParams.Add("mainSiteUrl", parameterToString(localVarOptionals.MainSiteUrl.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SiteURL.IsSet() {
		localVarQueryParams.Add("siteURL", parameterToString(localVarOptionals.SiteURL.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FName.IsSet() {
		localVarQueryParams.Add("fName", parameterToString(localVarOptionals.FName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LName.IsSet() {
		localVarQueryParams.Add("lName", parameterToString(localVarOptionals.LName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DisplayName.IsSet() {
		localVarQueryParams.Add("displayName", parameterToString(localVarOptionals.DisplayName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCountedByPlatinum.IsSet() {
		localVarQueryParams.Add("isCountedByPlatinum", parameterToString(localVarOptionals.IsCountedByPlatinum.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Statuses.IsSet() {
		localVarQueryParams.Add("statuses", parameterToString(localVarOptionals.Statuses.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HighestRanks.IsSet() {
		localVarQueryParams.Add("highestRanks", parameterToString(localVarOptionals.HighestRanks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchMainPK.IsSet() {
		localVarQueryParams.Add("searchMainPK", parameterToString(localVarOptionals.SearchMainPK.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SponsorshipApiService Check is user downline
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mainSiteUrl
 * @param downlineSiteUrl
 * @param optional nil or *SponsorshipApiSponsorshipTreeInDownlineOpts - Optional Parameters:
     * @param "ApiVersion" (optional.String) -  The requested API version

@return interface{}
*/

type SponsorshipApiSponsorshipTreeInDownlineOpts struct {
	ApiVersion optional.String
}

func (a *SponsorshipApiService) SponsorshipTreeInDownline(ctx context.Context, mainSiteUrl string, downlineSiteUrl string, localVarOptionals *SponsorshipApiSponsorshipTreeInDownlineOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/sponsorship/inDownline/{mainSiteUrl}/{downlineSiteUrl}"
	localVarPath = strings.Replace(localVarPath, "{"+"mainSiteUrl"+"}", fmt.Sprintf("%v", mainSiteUrl), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"downlineSiteUrl"+"}", fmt.Sprintf("%v", downlineSiteUrl), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
