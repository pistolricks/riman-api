/*
 * Profile-Api v1.0
 *
 * A Microsoft WebApi2 application. For use by Jeunesse and its Partners, this api has a focus on product and order creation
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package profile_v1

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type R3GlobalApiService service

/*
R3GlobalApiService Get the 2x2 Matrix data for the authenticated user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *R3GlobalApiR3GlobalGetUser2x2MatrixOpts - Optional Parameters:
     * @param "ApiVersion" (optional.String) -  The requested API version
     * @param "RequestChildLegs" (optional.Int32) -
     * @param "RequestOutputDepth" (optional.Int32) -
     * @param "RequestShouldOverrideFullLegsCheck" (optional.Bool) -

@return []JeunesseProfileCoreR3GlobalModelsMatrixNodeModel
*/

type R3GlobalApiR3GlobalGetUser2x2MatrixOpts struct {
	ApiVersion                         optional.String
	RequestChildLegs                   optional.Int32
	RequestOutputDepth                 optional.Int32
	RequestShouldOverrideFullLegsCheck optional.Bool
}

func (a *R3GlobalApiService) R3GlobalGetUser2x2Matrix(ctx context.Context, localVarOptionals *R3GlobalApiR3GlobalGetUser2x2MatrixOpts) ([]JeunesseProfileCoreR3GlobalModelsMatrixNodeModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []JeunesseProfileCoreR3GlobalModelsMatrixNodeModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/r3global/matrix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequestChildLegs.IsSet() {
		localVarQueryParams.Add("request.childLegs", parameterToString(localVarOptionals.RequestChildLegs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequestOutputDepth.IsSet() {
		localVarQueryParams.Add("request.outputDepth", parameterToString(localVarOptionals.RequestOutputDepth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequestShouldOverrideFullLegsCheck.IsSet() {
		localVarQueryParams.Add("request.shouldOverrideFullLegsCheck", parameterToString(localVarOptionals.RequestShouldOverrideFullLegsCheck.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []JeunesseProfileCoreR3GlobalModelsMatrixNodeModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
R3GlobalApiService Get the 2x2 Matrix data for the authenticated user.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mainpk The mainPK of the user whose timer is to be reset
 * @param optional nil or *R3GlobalApiR3GlobalReset2x2MatrixTimerOpts - Optional Parameters:
     * @param "ApiVersion" (optional.String) -  The requested API version

@return interface{}
*/

type R3GlobalApiR3GlobalReset2x2MatrixTimerOpts struct {
	ApiVersion optional.String
}

func (a *R3GlobalApiService) R3GlobalReset2x2MatrixTimer(ctx context.Context, mainpk int32, localVarOptionals *R3GlobalApiR3GlobalReset2x2MatrixTimerOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/r3global/matrix/{mainpk}/reset"
	localVarPath = strings.Replace(localVarPath, "{"+"mainpk"+"}", fmt.Sprintf("%v", mainpk), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
