/*
 * Profile-Api v1.0
 *
 * A Microsoft WebApi2 application. For use by Jeunesse and its Partners, this api has a focus on product and order creation
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package profile_v1

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AddressApiService service

/*
AddressApiService gets a list of potential address matches. Uses long/lat to narrow focus if provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param addressString
 * @param country
 * @param optional nil or *AddressApiAddressAddressAutocompleteOpts - Optional Parameters:
     * @param "Latitude" (optional.String) -
     * @param "Longitude" (optional.String) -
     * @param "ApiVersion" (optional.String) -  The requested API version

@return []JeunesseProfileCoreAddressAddressModelView
*/

type AddressApiAddressAddressAutocompleteOpts struct {
	Latitude   optional.String
	Longitude  optional.String
	ApiVersion optional.String
}

func (a *AddressApiService) AddressAddressAutocomplete(ctx context.Context, addressString string, country string, localVarOptionals *AddressApiAddressAddressAutocompleteOpts) ([]JeunesseProfileCoreAddressAddressModelView, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []JeunesseProfileCoreAddressAddressModelView
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/address/auto-complete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("AddressString", parameterToString(addressString, ""))
	localVarQueryParams.Add("Country", parameterToString(country, ""))
	if localVarOptionals != nil && localVarOptionals.Latitude.IsSet() {
		localVarQueryParams.Add("Latitude", parameterToString(localVarOptionals.Latitude.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Longitude.IsSet() {
		localVarQueryParams.Add("Longitude", parameterToString(localVarOptionals.Longitude.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []JeunesseProfileCoreAddressAddressModelView
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
AddressApiService Gets detailed address of provided address or placeId  Use placeId instead of address if possible to reduce cost
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AddressApiAddressAddressGetDetailsOpts - Optional Parameters:
     * @param "PlaceId" (optional.String) -
     * @param "ApiVersion" (optional.String) -  The requested API version

@return JeunesseProfileCoreAddressAddressModelView
*/

type AddressApiAddressAddressGetDetailsOpts struct {
	PlaceId    optional.String
	ApiVersion optional.String
}

func (a *AddressApiService) AddressAddressGetDetails(ctx context.Context, localVarOptionals *AddressApiAddressAddressGetDetailsOpts) (JeunesseProfileCoreAddressAddressModelView, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue JeunesseProfileCoreAddressAddressModelView
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/address/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PlaceId.IsSet() {
		localVarQueryParams.Add("PlaceId", parameterToString(localVarOptionals.PlaceId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v JeunesseProfileCoreAddressAddressModelView
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
AddressApiService Validate address by dynamic library
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AddressApiAddressAddressValidateOpts - Optional Parameters:
     * @param "ApiVersion" (optional.String) -  The requested API version
     * @param "SelectedShippingMethod" (optional.Int32) -
     * @param "IsAutoComplete" (optional.Bool) -
     * @param "Description" (optional.String) -
     * @param "Address1" (optional.String) -
     * @param "City" (optional.String) -
     * @param "State" (optional.String) -
     * @param "ZipCode" (optional.String) -
     * @param "Country" (optional.String) -
     * @param "PlaceId" (optional.String) -

@return JeunesseProfileCoreAddressModelsAddressValidationViewModel
*/

type AddressApiAddressAddressValidateOpts struct {
	ApiVersion             optional.String
	SelectedShippingMethod optional.Int32
	IsAutoComplete         optional.Bool
	Description            optional.String
	Address1               optional.String
	City                   optional.String
	State                  optional.String
	ZipCode                optional.String
	Country                optional.String
	PlaceId                optional.String
}

func (a *AddressApiService) AddressAddressValidate(ctx context.Context, localVarOptionals *AddressApiAddressAddressValidateOpts) (JeunesseProfileCoreAddressModelsAddressValidationViewModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue JeunesseProfileCoreAddressModelsAddressValidationViewModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/address/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ApiVersion.IsSet() {
		localVarQueryParams.Add("api-version", parameterToString(localVarOptionals.ApiVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SelectedShippingMethod.IsSet() {
		localVarQueryParams.Add("selectedShippingMethod", parameterToString(localVarOptionals.SelectedShippingMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsAutoComplete.IsSet() {
		localVarQueryParams.Add("isAutoComplete", parameterToString(localVarOptionals.IsAutoComplete.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Description.IsSet() {
		localVarQueryParams.Add("description", parameterToString(localVarOptionals.Description.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Address1.IsSet() {
		localVarQueryParams.Add("address1", parameterToString(localVarOptionals.Address1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarQueryParams.Add("city", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.State.IsSet() {
		localVarQueryParams.Add("state", parameterToString(localVarOptionals.State.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ZipCode.IsSet() {
		localVarQueryParams.Add("zipCode", parameterToString(localVarOptionals.ZipCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Country.IsSet() {
		localVarQueryParams.Add("country", parameterToString(localVarOptionals.Country.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PlaceId.IsSet() {
		localVarQueryParams.Add("placeId", parameterToString(localVarOptionals.PlaceId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v JeunesseProfileCoreAddressModelsAddressValidationViewModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
