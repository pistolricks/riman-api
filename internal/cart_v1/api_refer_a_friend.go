/*
 * Cart-Api v1
 *
 * A Microsoft WebApi2 application. For use by Jeunesse and its Partners, this api has a focus on product and order creation
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package cart_v1

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type ReferAFriendApiService service

/*
ReferAFriendApiService Save a list of referrals for a preferred customer.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param mainPk
  - @param referrals

@return []CustomerReferralReturnModel
*/
func (a *ReferAFriendApiService) ReferAFriendCreateReferrals(ctx context.Context, mainPk int32, referrals CustomerReferralFormModel) ([]CustomerReferralReturnModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []CustomerReferralReturnModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/rewards/refer-a-friend/{mainPk}"
	localVarPath = strings.Replace(localVarPath, "{"+"mainPk"+"}", fmt.Sprintf("%v", mainPk), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "text/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &referrals
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []CustomerReferralReturnModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ReferAFriendApiService Gets the list of referrals for a preferred customer.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *ReferAFriendApiReferAFriendGetReferralsAsyncOpts - Optional Parameters:
     * @param "CustomerMainPk" (optional.String) -
     * @param "ReferralId" (optional.String) -
     * @param "ReferralEmail" (optional.String) -
     * @param "ReferralFirstName" (optional.String) -
     * @param "ReferralLastName" (optional.String) -
     * @param "ReferralStatus" (optional.String) -
     * @param "ReferralBeforeDate" (optional.Time) -
     * @param "ReferralAfterDate" (optional.Time) -
     * @param "EarnedPointsBeforeDate" (optional.Time) -
     * @param "EarnedPointsAfterDate" (optional.Time) -
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "OrderBy" (optional.String) -
     * @param "SkipCount" (optional.Bool) -

@return CustomerReferralViewModel
*/

type ReferAFriendApiReferAFriendGetReferralsAsyncOpts struct {
	CustomerMainPk         optional.String
	ReferralId             optional.String
	ReferralEmail          optional.String
	ReferralFirstName      optional.String
	ReferralLastName       optional.String
	ReferralStatus         optional.String
	ReferralBeforeDate     optional.Time
	ReferralAfterDate      optional.Time
	EarnedPointsBeforeDate optional.Time
	EarnedPointsAfterDate  optional.Time
	Offset                 optional.Int32
	Limit                  optional.Int32
	OrderBy                optional.String
	SkipCount              optional.Bool
}

func (a *ReferAFriendApiService) ReferAFriendGetReferralsAsync(ctx context.Context, localVarOptionals *ReferAFriendApiReferAFriendGetReferralsAsyncOpts) (CustomerReferralViewModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue CustomerReferralViewModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/rewards/refer-a-friend"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.CustomerMainPk.IsSet() {
		localVarQueryParams.Add("customerMainPk", parameterToString(localVarOptionals.CustomerMainPk.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferralId.IsSet() {
		localVarQueryParams.Add("referralId", parameterToString(localVarOptionals.ReferralId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferralEmail.IsSet() {
		localVarQueryParams.Add("referralEmail", parameterToString(localVarOptionals.ReferralEmail.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferralFirstName.IsSet() {
		localVarQueryParams.Add("referralFirstName", parameterToString(localVarOptionals.ReferralFirstName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferralLastName.IsSet() {
		localVarQueryParams.Add("referralLastName", parameterToString(localVarOptionals.ReferralLastName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferralStatus.IsSet() {
		localVarQueryParams.Add("referralStatus", parameterToString(localVarOptionals.ReferralStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferralBeforeDate.IsSet() {
		localVarQueryParams.Add("referralBeforeDate", parameterToString(localVarOptionals.ReferralBeforeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReferralAfterDate.IsSet() {
		localVarQueryParams.Add("referralAfterDate", parameterToString(localVarOptionals.ReferralAfterDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EarnedPointsBeforeDate.IsSet() {
		localVarQueryParams.Add("earnedPointsBeforeDate", parameterToString(localVarOptionals.EarnedPointsBeforeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EarnedPointsAfterDate.IsSet() {
		localVarQueryParams.Add("earnedPointsAfterDate", parameterToString(localVarOptionals.EarnedPointsAfterDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderBy.IsSet() {
		localVarQueryParams.Add("orderBy", parameterToString(localVarOptionals.OrderBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SkipCount.IsSet() {
		localVarQueryParams.Add("skipCount", parameterToString(localVarOptionals.SkipCount.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v CustomerReferralViewModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ReferAFriendApiService Gets the refer a friend config.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return CustomerReferralSettingsSimpleModel
*/
func (a *ReferAFriendApiService) ReferAFriendGetSettings(ctx context.Context) (CustomerReferralSettingsSimpleModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue CustomerReferralSettingsSimpleModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/rewards/refer-a-friend/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v CustomerReferralSettingsSimpleModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ReferAFriendApiService Gets the customer status for referrals.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return []CustomerReferralStatusModel
*/
func (a *ReferAFriendApiService) ReferAFriendGetStatus(ctx context.Context) ([]CustomerReferralStatusModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []CustomerReferralStatusModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/rewards/refer-a-friend/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []CustomerReferralStatusModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
